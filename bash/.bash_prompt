#! /usr/bin/env bash

case "$TERM" in
  xterm-color|*-256color) color_prompt=yes;;
esac

if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Creditos para mathiasbynens no github
prompt_git(){
  local s='';
  local branchName='';

 # Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return;

	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	# Early exit for Chromium & Blink repo, as the dirty check takes too long.
	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		s+='*';
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+';
		fi;
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!';
		fi;
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?';
		fi;
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$';
		fi;
	fi;

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}${branchName}${2}${s}";

}

if tput setaf 1 &> /dev/null; then
  tput sgr0;
  bold=$(tput bold);
  reset=$(tput sgr0);
  black=$(tput setaf 16);
  red=$(tput setaf 9);
  green=$(tput setaf 10);
  yellow=$(tput setaf 11);
  blue=$(tput setaf 12);
  purple=$(tput setaf 13);
  cyan=$(tput setaf 14);
  white=$(tput setaf 15);
else
  bold='';
	reset="\e[0m";
	black="\e[0;90m";
  red="\e[0;91m";
  green="\e[0;92m";
  yellow="\e[0;93m";
  blue="\e[0;94m";
  purple="\e[0;95m";
  cyan="\e[0;96m";
  white="\e[0;96m";
fi

if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else
  userStyle="${green}";
fi

if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${yellow}";
else
  hostStyle="${bold}${cyan}";
fi

if [ "$color_prompt" = yes ]; then
  PS1="${debian_chroot:+($debian_chroot)}"
  PS1+="\[${userStyle}\]\u";
  PS1+="\[${white}\]@";
  PS1+="\[${hostStyle}\]\h";
  PS1+="\[${white}\] in ";
  PS1+="\[${purple}\]\W";
  PS1+="\$(prompt_git \"\[${white}\] on \[${red}\]\" \"\[${blue}\]\")"; # Git repository details
  PS1+="\[${white}\]\$ \[${reset}\]";
else
  PS1="${debian_chroot:+($debian_chroot)}\u@\h in \W\n\$ "
fi

unset color_prompt

export PS1;
